scandi : stack-based programming language
=========================================

OVERVIEW
========

scandi is a language I created to target my 8-bit CPU (see
https://github.com/Chaosinflesh/8-bit).

* Based on so-called 'swedish maths' principles, where operands form a
  stack that is provided to operators, which pop operands, and push
  results as further operands.
* No keywords, uses symbols to identify declarations
* Scope is determined by indentation
* Lines must end with an operator
* Functions can be declared anywhere within scope
* Variables must be declared within either parent scope, or before use
* Variables, functions and labels may not share names within scope
* 3 data types: number, "String" and raw binary data.
* If a comparison results in true, executes the next instruction/scope,
  or if false and : next instruction in scope, execute after that.
* Can return multiple values (as a list), via assignment to function name.


FORMAL STRUCTURE
================

This is a work-in-progress.

COMMENT     ` Anything to end of line is ignored
INCLUDE     {<file | file.item... to include in scope>}
LABEL       \<label name>
ADDRESS     _<64-bit value|variable, either integer or hexadecimal>
VARIABLE    [$]$<variable name>
FUNCTION    [@]@<function name>

NUMBER      <decimal with [comma]> | #<hexadecimal up to 32-bits>
STRING      "quote wrapped"'speech marks inside apostrophes"'
BINARY      __<hexadecimal any length>
NULL        ()

VAR_DECL    VARIABLE [OPERATION ASSIGNMENT]
FUNC_DECL   [ VARIABLE<ASSIGNMENT>* | [] ] FUNCTION

ASSIGNMENT  =   <primitives value, objects reference>

EQ          ?   <primitives by value, objects by reference>
LT          <
GT          >
LTE         ?<
GTE         ?>
COMPARISON  SHALLOW_EQ | REF_EQ | LT | GT | LTE | GTE
ELSE        :

COMPL       ~
AND         &
OR          |
XOR         ^
ADD         +
SUB         -
MUL         *
DIV         /
MOD         %
SHL         <-
SHR         ->
SSR         >>
MATH        COMPL | AND | OR | XOR | ADD | SUB
            | MUL | DIV | MOD | SHL | SHR | SSR

OPERAND     NUMBER | STRING | BINARY | NULL
            | <variable name> | <function name>
            | OPERATION | (OPERAND) | (OPERATION)
OPERATOR    ASSIGNMENT | COMPARISON | MATH | <function name>
OPERATION   OPERAND* OPERATOR

LINE        INCLUDE | LABEL | VAR_DECL | FUNC_DECL | OPERATION | NULL
            
SPECIALS    . <reference sub-variable|function by name>
            [<index>] <reference sub-variable|function by index>
            [] <get all variable|function children>
            ! <get count of variable|function children>
